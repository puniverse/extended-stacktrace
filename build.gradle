plugins {
    id 'java'
    id 'maven'
    id 'signing'
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group               = "co.paralleluniverse"
version             = "0.1.0-SNAPSHOT"
status              = "integration"
description         = "Stack Traces with Extended Information"
ext.url             = "http://puniverse.github.com/extended-stacktrace"
ext.vendor          = "Parallel Universe Software Co."
ext.licenseName1    = "The GNU Lesser General Public License, version 3"
ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
ext.licenseName2    = "Eclipse Public License - v 1.0"
ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
ext.scmUrl          = "https://github.com/puniverse/extended-stacktrace"
ext.scmConnection   = "https://github.com/puniverse/extended-stacktrace.git"

ext.distDir         = "$buildDir/dist"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()
}

configurations {
    provided
    compileOnly
}

sourceSets {
    main {
        compileClasspath += configurations.compileOnly + configurations.provided
    }

    test {
        compileClasspath += configurations.compileOnly + configurations.provided
        runtimeClasspath += configurations.provided
    }
}
    
dependencies {
    compile "org.ow2.asm:asm:5.0.4"
    testCompile 'junit:junit:4.10'
}

jar {
    manifest {
        attributes(
	            "Built-By"                  :   System.getProperty("user.name"),
	            "Implementation-Title"      :   project.name,
	            "Implementation-Version"    :   version,
	            "Implementation-Vendor"     :   vendor,
        )
    }
}

javadoc {
    options {
        links = [ "http://docs.oracle.com/javase/8/docs/api/" ]
        noDeprecated = true
        addStringOption('public', '-quiet')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
    println "sonatype username or password not set"
    ext.sonatypeUsername = ""
    ext.sonatypePassword = ""
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(
                url: (isReleaseVersion ?
	                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
	                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                // User and Password are taken from ~/.gradle/gradle.properties
                authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
            }
            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url project.url
                scm {
                    url project.scmUrl
                    connection project.scmConnection
                    developerConnection project.scmConnection
                }
                licenses {
                    license {
                        name project.licenseName1
                        url project.licenseUrl1
                        distribution 'repo'
                    }
                    license {
                        name project.licenseName2
                        url project.licenseUrl2
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'pron'
                        name 'Ron Pressler'
                    }
                }
            }
        }
    }
}
    
install.repositories.mavenInstaller {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

uploadArchives.repositories.mavenDeployer {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
